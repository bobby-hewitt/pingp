{"ast":null,"code":"function subscribeToHostEvents(self, socket, cb) {\n  'quiz-player-response';\n\n  socket.on('quiz-player-response', playerResponse.bind(this, self, socket));\n}\n\nfunction playerResponse(self, socket, data) {\n  console.log('setting responses', data);\n  self.props.setResponse(data);\n}\n\nfunction unsubscribeToHostEvents(socket) {// socket.removeAllListeners(\"start-game\");\n  // socket.removeAllListeners(\"device-orientation-sending\");\n  // socket.removeAllListeners(\"quit-game-player\");\n  // socket.removeAllListeners(\"restart-game\");\n}\n\nfunction sendPlayersToWaiting() {\n  socket.emit('quiz-send-players-to-waiting');\n}\n\nfunction showQuestionSocket(self, socket) {\n  self.props.showQuestionHost();\n  socket.emit('quiz-show-question', self.props.currentQuestion);\n}\n\nexport { showQuestionSocket, subscribeToHostEvents, unsubscribeToHostEvents };","map":{"version":3,"sources":["/Users/bobby.hewitt/Documents/test/ops/fe/src/sockets/Quiz/host.js"],"names":["subscribeToHostEvents","self","socket","cb","on","playerResponse","bind","data","console","log","props","setResponse","unsubscribeToHostEvents","sendPlayersToWaiting","emit","showQuestionSocket","showQuestionHost","currentQuestion"],"mappings":"AAAA,SAASA,qBAAT,CAA+BC,IAA/B,EAAqCC,MAArC,EAA6CC,EAA7C,EAAiD;AACjD;;AACCD,EAAAA,MAAM,CAACE,EAAP,CAAU,sBAAV,EAAkCC,cAAc,CAACC,IAAf,CAAoB,IAApB,EAA0BL,IAA1B,EAAgCC,MAAhC,CAAlC;AACA;;AAED,SAASG,cAAT,CAAwBJ,IAAxB,EAA8BC,MAA9B,EAAsCK,IAAtC,EAA2C;AAC1CC,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCF,IAAjC;AACAN,EAAAA,IAAI,CAACS,KAAL,CAAWC,WAAX,CAAuBJ,IAAvB;AACA;;AAED,SAASK,uBAAT,CAAiCV,MAAjC,EAAyC,CACxC;AACA;AACA;AACA;AACA;;AAGD,SAASW,oBAAT,GAA+B;AAC9BX,EAAAA,MAAM,CAACY,IAAP,CAAY,8BAAZ;AACA;;AAED,SAASC,kBAAT,CAA4Bd,IAA5B,EAAkCC,MAAlC,EAAyC;AACxCD,EAAAA,IAAI,CAACS,KAAL,CAAWM,gBAAX;AACAd,EAAAA,MAAM,CAACY,IAAP,CAAY,oBAAZ,EAAkCb,IAAI,CAACS,KAAL,CAAWO,eAA7C;AACA;;AAGD,SACCF,kBADD,EAECf,qBAFD,EAGCY,uBAHD","sourcesContent":["function subscribeToHostEvents(self, socket, cb) {\n'quiz-player-response'\n\tsocket.on('quiz-player-response', playerResponse.bind(this, self, socket))\t\n}\n\nfunction playerResponse(self, socket, data){\n\tconsole.log('setting responses', data)\n\tself.props.setResponse(data)\n}\n\nfunction unsubscribeToHostEvents(socket) {\n\t// socket.removeAllListeners(\"start-game\");\n\t// socket.removeAllListeners(\"device-orientation-sending\");\n\t// socket.removeAllListeners(\"quit-game-player\");\n\t// socket.removeAllListeners(\"restart-game\");\n}\n\n\nfunction sendPlayersToWaiting(){\n\tsocket.emit('quiz-send-players-to-waiting')\n}\n\nfunction showQuestionSocket(self, socket){\n\tself.props.showQuestionHost()\n\tsocket.emit('quiz-show-question', self.props.currentQuestion)\n}\n\n\nexport {\n\tshowQuestionSocket,\n\tsubscribeToHostEvents,\n\tunsubscribeToHostEvents\n};"]},"metadata":{},"sourceType":"module"}