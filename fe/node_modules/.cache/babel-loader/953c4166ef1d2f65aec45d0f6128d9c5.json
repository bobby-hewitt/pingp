{"ast":null,"code":"import _classCallCheck from \"/Users/bobby.hewitt/Documents/test/ops/fe/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/bobby.hewitt/Documents/test/ops/fe/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/bobby.hewitt/Documents/test/ops/fe/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/bobby.hewitt/Documents/test/ops/fe/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/bobby.hewitt/Documents/test/ops/fe/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/bobby.hewitt/Documents/test/ops/fe/src/containers/SocketListener/PingP.js\";\nimport React, { Component } from 'react';\nimport { push as _push } from 'react-router-redux';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux'; //pingP events\n\nimport { subscribeToPlayerEvents, unsubscribeToPlayerEvents } from 'sockets/PingP/player';\nimport { subscribeToHostEvents, unsubscribeToHostEvents } from 'sockets/PingP/host'; //pingP actions\n\nimport { setRoomCode, startRoundHost, setResponses, setCoords1, setCoords2 } from 'actions/PingP/host';\nimport { setPlayerRoom, setPlayerNumber, powerUpGained, powerUpUsed } from 'actions/PingP/player';\nimport { setSelf } from 'actions/general/player';\nimport { startGame, setGameOver, powerUpUsedGameplay } from 'actions/PingP/gameplay';\nimport { updatePlayers } from 'actions/general/host';\nimport { setPlayerData } from 'actions/general/player';\n\nvar SocketListener =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SocketListener, _Component);\n\n  function SocketListener() {\n    _classCallCheck(this, SocketListener);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(SocketListener).apply(this, arguments));\n  }\n\n  _createClass(SocketListener, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this = this;\n\n      // console.log('socket listener mounting')\n      if (this.props.isHost) {\n        subscribeToHostEvents(this, this.props.socket, function (action, data) {\n          _this.props[action](data);\n        });\n      } else {\n        subscribeToPlayerEvents(this, this.props.socket, function (action, data) {\n          _this.props[action](data);\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.props.isHost) {\n        unsubscribeToHostEvents(this.props.socket);\n      } else {\n        unsubscribeToPlayerEvents(this.props.socket);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return SocketListener;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {// count: state.counter.count\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    //general functions\n    setSelf: setSelf,\n    updatePlayers: updatePlayers,\n    setPlayerData: setPlayerData,\n    //game specific functions\n    setRoomCode: setRoomCode,\n    powerUpUsedGameplay: powerUpUsedGameplay,\n    powerUpGained: powerUpGained,\n    powerUpUsed: powerUpUsed,\n    startGame: startGame,\n    setGameOver: setGameOver,\n    setPlayerNumber: setPlayerNumber,\n    setResponses: setResponses,\n    setCoords1: setCoords1,\n    setCoords2: setCoords2,\n    startRoundHost: startRoundHost,\n    setPlayerRoom: setPlayerRoom,\n    push: function push(path) {\n      return _push('/' + path);\n    }\n  }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SocketListener);","map":{"version":3,"sources":["/Users/bobby.hewitt/Documents/test/ops/fe/src/containers/SocketListener/PingP.js"],"names":["React","Component","push","bindActionCreators","connect","subscribeToPlayerEvents","unsubscribeToPlayerEvents","subscribeToHostEvents","unsubscribeToHostEvents","setRoomCode","startRoundHost","setResponses","setCoords1","setCoords2","setPlayerRoom","setPlayerNumber","powerUpGained","powerUpUsed","setSelf","startGame","setGameOver","powerUpUsedGameplay","updatePlayers","setPlayerData","SocketListener","props","isHost","socket","action","data","mapStateToProps","state","mapDispatchToProps","dispatch","path"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { push } from 'react-router-redux'\nimport { bindActionCreators } from 'redux'\nimport { connect } from 'react-redux'\n//pingP events\nimport {subscribeToPlayerEvents, unsubscribeToPlayerEvents} from 'sockets/PingP/player'\nimport {subscribeToHostEvents, unsubscribeToHostEvents} from 'sockets/PingP/host'\n\n//pingP actions\nimport { setRoomCode, startRoundHost, setResponses, setCoords1, setCoords2 } from 'actions/PingP/host'\nimport { setPlayerRoom, setPlayerNumber, powerUpGained, powerUpUsed } from 'actions/PingP/player'\nimport { setSelf } from 'actions/general/player'\nimport { startGame, setGameOver, powerUpUsedGameplay } from 'actions/PingP/gameplay'\nimport { updatePlayers } from 'actions/general/host'\nimport { setPlayerData } from 'actions/general/player'\n\nclass SocketListener extends Component {\n  \n  componentDidMount(){\n    // console.log('socket listener mounting')\n    if (this.props.isHost){\n      subscribeToHostEvents(this, this.props.socket, (action, data) => {\n        this.props[action](data)\n      })\n    } else {\n     subscribeToPlayerEvents(this, this.props.socket, (action, data) => {\n        this.props[action](data)\n     })\n   }\n  }\n\n  componentWillUnmount(){\n     if (this.props.isHost){\n      unsubscribeToHostEvents(this.props.socket)\n    } else {\n     unsubscribeToPlayerEvents(this.props.socket)\n   }\n  }\n\n  render(){\n    return(\n      <div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  // count: state.counter.count\n})\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n  //general functions\n  setSelf,\n  updatePlayers,\n  setPlayerData,\n  //game specific functions\n  setRoomCode,\n  powerUpUsedGameplay,\n  powerUpGained,\n  powerUpUsed,\n  startGame,\n  setGameOver,\n  setPlayerNumber,\n  setResponses,\n  setCoords1,\n  setCoords2,\n  startRoundHost,\n  setPlayerRoom,\n  push: (path) => push('/' + path)\n}, dispatch)\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SocketListener)"]},"metadata":{},"sourceType":"module"}