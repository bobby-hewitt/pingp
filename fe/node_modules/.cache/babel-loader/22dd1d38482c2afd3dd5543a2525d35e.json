{"ast":null,"code":"import _objectSpread from \"/Users/bobby.hewitt/Documents/test/ops/fe/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar initialState = {\n  questions: [],\n  startTime: 0,\n  questionIndex: 0,\n  players: [],\n  currentQuestion: null,\n  quizState: 'break',\n  responses: [],\n  scores: []\n};\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'QUIZ_SETUP_GAME_HOST':\n      return _objectSpread({}, state, {\n        questions: action.payload.questions,\n        currentQuestion: action.payload.questions[0],\n        players: action.payload.players\n      });\n\n    case 'QUIZ_SHOW_QUESTION_HOST':\n      //handles the end of the quiz\n      if (state.currentIndex <= state.questions.length) {\n        return _objectSpread({}, state, {\n          quizState: 'end'\n        });\n      } else {\n        //move on to the next question\n        return _objectSpread({}, state, {\n          startTime: new Date().getTime(),\n          currentQuestion: state.questions[state.questionIndex],\n          quizState: \"question\"\n        });\n      }\n\n    case 'QUIZ_SHOW_ANSWER_HOST':\n      return _objectSpread({\n        quizState: 'answer'\n      }, state);\n\n    case 'QUIZ_SHOW_SCORES_HOST':\n      //need to update questiobn index\n      return _objectSpread({}, state);\n\n    case 'QUIZ_SET_RESPONSE':\n      var newResponses = Object.assign([], state.responses);\n      newResponses.push(action.payload);\n      return _objectSpread({}, state, {\n        responses: newResponses\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/bobby.hewitt/Documents/test/ops/fe/src/reducers/Quiz/host.js"],"names":["initialState","questions","startTime","questionIndex","players","currentQuestion","quizState","responses","scores","state","action","type","payload","currentIndex","length","Date","getTime","newResponses","Object","assign","push"],"mappings":";AACA,IAAMA,YAAY,GAAG;AACnBC,EAAAA,SAAS,EAAE,EADQ;AAEnBC,EAAAA,SAAS,EAAE,CAFQ;AAGnBC,EAAAA,aAAa,EAAE,CAHI;AAInBC,EAAAA,OAAO,EAAE,EAJU;AAKnBC,EAAAA,eAAe,EAAE,IALE;AAMnBC,EAAAA,SAAS,EAAE,OANQ;AAOnBC,EAAAA,SAAS,EAAE,EAPQ;AAQnBC,EAAAA,MAAM,EAAE;AARW,CAArB;AAWA,gBAAe,YAAkC;AAAA,MAAjCC,KAAiC,uEAAzBT,YAAyB;AAAA,MAAXU,MAAW;;AAC/C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,sBAAL;AACE,+BACKF,KADL;AAEER,QAAAA,SAAS,EAAES,MAAM,CAACE,OAAP,CAAeX,SAF5B;AAGEI,QAAAA,eAAe,EAAEK,MAAM,CAACE,OAAP,CAAeX,SAAf,CAAyB,CAAzB,CAHnB;AAIEG,QAAAA,OAAO,EAAEM,MAAM,CAACE,OAAP,CAAeR;AAJ1B;;AAMF,SAAK,yBAAL;AACE;AACA,UAAIK,KAAK,CAACI,YAAN,IAAsBJ,KAAK,CAACR,SAAN,CAAgBa,MAA1C,EAAiD;AAC/C,iCACOL,KADP;AAEIH,UAAAA,SAAS,EAAC;AAFd;AAID,OALD,MAMK;AACH;AACA,iCACKG,KADL;AAEEP,UAAAA,SAAS,EAAG,IAAIa,IAAJ,EAAD,CAAaC,OAAb,EAFb;AAGEX,UAAAA,eAAe,EAAEI,KAAK,CAACR,SAAN,CAAgBQ,KAAK,CAACN,aAAtB,CAHnB;AAIEG,UAAAA,SAAS,EAAE;AAJb;AAMD;;AACH,SAAK,uBAAL;AACE;AACEA,QAAAA,SAAS,EAAC;AADZ,SAEKG,KAFL;;AAIF,SAAK,uBAAL;AACA;AACE,+BACKA,KADL;;AAGF,SAAK,mBAAL;AACE,UAAIQ,YAAY,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBV,KAAK,CAACF,SAAxB,CAAnB;AACAU,MAAAA,YAAY,CAACG,IAAb,CAAkBV,MAAM,CAACE,OAAzB;AACA,+BACKH,KADL;AAEEF,QAAAA,SAAS,EAAEU;AAFb;;AAIF;AACE,aAAOR,KAAP;AA3CJ;AA6CD,CA9CD","sourcesContent":["\nconst initialState = {\n  questions: [],\n  startTime: 0,\n  questionIndex: 0,\n  players: [],\n  currentQuestion: null,\n  quizState: 'break',\n  responses: [],\n  scores: [],\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case 'QUIZ_SETUP_GAME_HOST':\n      return {\n        ...state,\n        questions: action.payload.questions,\n        currentQuestion: action.payload.questions[0],\n        players: action.payload.players,\n      }\n    case 'QUIZ_SHOW_QUESTION_HOST':\n      //handles the end of the quiz\n      if (state.currentIndex <= state.questions.length){\n        return {\n            ...state,\n            quizState:'end'\n        }\n      }\n      else {\n        //move on to the next question\n        return {\n          ...state,\n          startTime: (new Date()).getTime(),\n          currentQuestion: state.questions[state.questionIndex],  \n          quizState: \"question\"\n        }\n      }\n    case 'QUIZ_SHOW_ANSWER_HOST':\n      return {\n        quizState:'answer',\n        ...state \n      }\n    case 'QUIZ_SHOW_SCORES_HOST':\n    //need to update questiobn index\n      return {\n        ...state \n      }\n    case 'QUIZ_SET_RESPONSE':\n      let newResponses = Object.assign([], state.responses)\n      newResponses.push(action.payload)\n      return {\n        ...state,\n        responses: newResponses\n      }\n    default:\n      return state\n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}