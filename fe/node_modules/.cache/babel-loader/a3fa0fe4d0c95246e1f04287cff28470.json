{"ast":null,"code":"import _classCallCheck from \"/Users/bobby.hewitt/Documents/test/ops/fe/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/bobby.hewitt/Documents/test/ops/fe/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/bobby.hewitt/Documents/test/ops/fe/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/bobby.hewitt/Documents/test/ops/fe/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/bobby.hewitt/Documents/test/ops/fe/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/bobby.hewitt/Documents/test/ops/fe/src/containers/Quiz/Host/index.js\";\nimport React, { Component } from 'react';\nimport { push as _push } from 'connected-react-router';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { setupGame, showAnswer, showScores } from 'actions/quiz/host';\nimport SocketListener from 'containers/SocketListener/Quiz';\nimport { showQuestionSocket } from 'sockets/Quiz/host';\nimport { showQuestionHost } from 'actions/quiz/host';\nimport './style.scss';\nimport Question from './Question';\nimport PlayerResponse from './PlayerResponse';\n\nvar QuizHost =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(QuizHost, _Component);\n\n  function QuizHost(props) {\n    var _this;\n\n    _classCallCheck(this, QuizHost);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(QuizHost).call(this, props));\n    _this.timeouts = {};\n    _this.state = {};\n    return _this;\n  }\n\n  _createClass(QuizHost, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.setupGame();\n    }\n  }, {\n    key: \"getNumberOfTruthies\",\n    value: function getNumberOfTruthies(array) {\n      var count = 0;\n\n      for (var i = 0; i < array.length; i++) {\n        if (array[i]) count += 1;\n      }\n\n      return count;\n    }\n  }, {\n    key: \"compareResponsesToPlayers\",\n    value: function compareResponsesToPlayers() {\n      var playerCount = 0;\n      var players = this.props.players.length;\n      var responses = this.props.responses;\n      var allPlayersHaveResponded = true;\n\n      for (var i = 0; i < players.length; i++) {\n        if (players[i]) {\n          var hasResponded = responses.find(function (r) {\n            return r.id === players[i].id;\n          });\n\n          if (!hasResponded) {\n            allPlayersHaveResponded = false;\n          }\n        }\n      }\n\n      if (allPlayersHaveResponded) {\n        this.calculateScores();\n      }\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(np) {\n      if (this.props.responses.length !== np.responses.length) {\n        //check to see if all active players have responded\n        this.compareResponsesToPlayers();\n      }\n    }\n  }, {\n    key: \"shuffle\",\n    value: function shuffle(array) {\n      var currentIndex = array.length,\n          temporaryValue,\n          randomIndex;\n\n      while (0 !== currentIndex) {\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n      }\n\n      return array;\n    }\n  }, {\n    key: \"setupGame\",\n    value: function setupGame() {\n      var _this2 = this;\n\n      fetch('https://opentdb.com/api.php?amount=10&type=multiple').then(function (resp) {\n        return resp.json();\n      }) // Transform the data into json\n      .then(function (data) {\n        // give players scores\n        // let playersWithScores = []\n        // for (let i = 0; i < this.props.players.length; i++){\n        // \tlet player = {\n        // \t\tid: this.props.players[i].id,\n        // \t\tname: this.props.players[i].name,\n        // \t\tscore: 0\n        // \t}\n        // \tif (this.props.player[i]){\n        // \t\tplayersWithScores.push(player)\n        // \t}\n        // }\n        //shuffle wrong answers with correct ones\n        for (var i = 0; i < data.results.length; i++) {\n          var q = data.results[i];\n          q.all_answers = q.incorrect_answers;\n          q.all_answers.push(q.correct_answer);\n          q.all_answers = _this2.shuffle(q.all_answers);\n        }\n\n        var obj = {\n          questions: data.results // players: playersWithScores\n\n        };\n        console.log(obj);\n\n        _this2.props.setupGame(obj);\n\n        _this2.intro();\n      }).catch(function (err) {\n        console.log('error fetchi9ng data', err);\n      });\n    }\n  }, {\n    key: \"intro\",\n    value: function intro() {\n      this.showQuestion();\n    }\n  }, {\n    key: \"showQuestion\",\n    value: function showQuestion() {\n      console.log(this.props);\n      showQuestionSocket(this, this.props.socket);\n    }\n  }, {\n    key: \"showAnswer\",\n    value: function showAnswer() {\n      this.props.showAnswer(); //force all sockets to waiting state\n    }\n  }, {\n    key: \"calculateScores\",\n    value: function calculateScores() {\n      var players = this.props.players;\n      var responses = this.props.responses;\n      var scores = this.props.scores;\n    }\n  }, {\n    key: \"showScores\",\n    value: function showScores() {\n      this.props.showScores(); //move to next question index.\n      //reset timings\n      //reset responses\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var currentQuestion = this.props.currentQuestion;\n      return React.createElement(\"div\", {\n        className: \"quizHostContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, React.createElement(SocketListener, {\n        isHost: true,\n        socket: this.props.socket,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }), this.props.quizState === 'break' && React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, \"Break\"), this.props.quizState === 'question' && React.createElement(\"div\", {\n        className: \"sceneContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, React.createElement(Question, {\n        question: currentQuestion,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"responsesContainerHost\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, this.props.responses && this.props.responses.map(function (response, i) {\n        return React.createElement(PlayerResponse, Object.assign({}, response, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 160\n          },\n          __self: this\n        }));\n      }))), this.props.quizState === 'answer' && React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, \"Answer\"), this.props.quizState === 'end' && React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, \"End\"));\n    }\n  }]);\n\n  return QuizHost;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    room: state.generalHost.room,\n    startTime: state.quizHost.startTime,\n    players: state.generalHost.players,\n    router: state.router,\n    responses: state.quizHost.responses,\n    quizPlayers: state.quizHost.players,\n    currentQuestion: state.quizHost.currentQuestion,\n    quizState: state.quizHost.quizState\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    push: function push(path) {\n      return _push(path);\n    },\n    setupGame: setupGame,\n    showAnswer: showAnswer,\n    showQuestionHost: showQuestionHost,\n    showScores: showScores\n  }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuizHost);","map":{"version":3,"sources":["/Users/bobby.hewitt/Documents/test/ops/fe/src/containers/Quiz/Host/index.js"],"names":["React","Component","push","bindActionCreators","connect","setupGame","showAnswer","showScores","SocketListener","showQuestionSocket","showQuestionHost","Question","PlayerResponse","QuizHost","props","timeouts","state","array","count","i","length","playerCount","players","responses","allPlayersHaveResponded","hasResponded","find","r","id","calculateScores","np","compareResponsesToPlayers","currentIndex","temporaryValue","randomIndex","Math","floor","random","fetch","then","resp","json","data","results","q","all_answers","incorrect_answers","correct_answer","shuffle","obj","questions","console","log","intro","catch","err","showQuestion","socket","scores","currentQuestion","quizState","map","response","mapStateToProps","room","generalHost","startTime","quizHost","router","quizPlayers","mapDispatchToProps","dispatch","path"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { push } from 'connected-react-router'\nimport { bindActionCreators } from 'redux'\nimport { connect } from 'react-redux'\nimport { setupGame, showAnswer, showScores } from 'actions/quiz/host'\nimport SocketListener from 'containers/SocketListener/Quiz'\nimport { showQuestionSocket } from 'sockets/Quiz/host'\nimport { showQuestionHost } from 'actions/quiz/host'\nimport './style.scss'\nimport Question from './Question'\nimport PlayerResponse from './PlayerResponse'\nclass QuizHost extends Component {\n\n\tconstructor(props){\n\t\tsuper(props)\n\t\tthis.timeouts = {\n\n\t\t}\n\t\tthis.state = {\n\n\t\t}\n\t}\n\n\tcomponentWillMount(){\n\t\tthis.setupGame()\n\t}\n\n\tgetNumberOfTruthies(array){\n\t\tlet count = 0\n\t\tfor (var i = 0; i < array.length; i++){\n\t\t\tif(array[i]) count += 1\n\t\t}\n\t\treturn count\n\t}\n\n\n\n\tcompareResponsesToPlayers(){\n\t\tlet playerCount = 0;\n\t\tlet players = this.props.players.length;\n\t\tlet responses = this.props.responses\n\t\tlet allPlayersHaveResponded = true;\n\t\tfor (var i = 0; i < players.length; i++){\n\t\t\tif (players[i]){\n\t\t\t\tlet hasResponded = responses.find(r => r.id === players[i].id)\n\t\t\t\tif (!hasResponded){\n\t\t\t\t\tallPlayersHaveResponded = false\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (allPlayersHaveResponded){\n\t\t\tthis.calculateScores()\n\t\t}\n\t}\n\n\tcomponentWillReceiveProps(np){\n\t\tif (this.props.responses.length !== np.responses.length){\n\t\t\t//check to see if all active players have responded\n\t\t\tthis.compareResponsesToPlayers()\n\t\t}\n\t}\n\n\tshuffle(array) {\n\t  var currentIndex = array.length, temporaryValue, randomIndex;\n\t  while (0 !== currentIndex) {\n\t    randomIndex = Math.floor(Math.random() * currentIndex);\n\t    currentIndex -= 1;\n\t    temporaryValue = array[currentIndex];\n\t    array[currentIndex] = array[randomIndex];\n\t    array[randomIndex] = temporaryValue;\n\t  }\n\t  return array;\n\t}\n\n\tsetupGame(){\n\t\tfetch('https://opentdb.com/api.php?amount=10&type=multiple')\n\t\t\t.then((resp) => resp.json()) // Transform the data into json\n\t\t\t.then((data) => {\n\t\t\t// give players scores\n\t\t\t// let playersWithScores = []\n\t\t\t// for (let i = 0; i < this.props.players.length; i++){\n\t\t\t// \tlet player = {\n\t\t\t// \t\tid: this.props.players[i].id,\n\t\t\t// \t\tname: this.props.players[i].name,\n\t\t\t// \t\tscore: 0\n\t\t\t// \t}\n\t\t\t// \tif (this.props.player[i]){\n\t\t\t// \t\tplayersWithScores.push(player)\n\t\t\t// \t}\n\t\t\t// }\n\t\t\t//shuffle wrong answers with correct ones\n\t\t\tfor (let i = 0; i < data.results.length; i++){\n\t\t\t\tlet q = data.results[i]\n\t\t\t\tq.all_answers = q.incorrect_answers\n\t\t\t\tq.all_answers.push(q.correct_answer) \n\t\t\t\tq.all_answers = this.shuffle(q.all_answers)\n\t\t\t}\n\t\t\tlet obj = {\n\t\t\t\tquestions: data.results,\n\t\t\t\t// players: playersWithScores\n\t\t\t}\n\t\t\tconsole.log(obj)\n\t\t\tthis.props.setupGame(obj)\n\t\t\tthis.intro()\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log('error fetchi9ng data', err)\n\t\t})\n\t}\n\n\tintro(){\t\n\t\tthis.showQuestion()\n\t}\n\n\tshowQuestion(){\n\t\tconsole.log(this.props)\n\t\tshowQuestionSocket(this, this.props.socket)\n\t}\n\n\tshowAnswer(){\n\t\tthis.props.showAnswer()\n\t\t//force all sockets to waiting state\n\t}\n\n\tcalculateScores(){\n\t\tlet players = this.props.players\n\t\tlet responses = this.props.responses \n\t\tlet scores = this.props.scores \n\n\t}\n\n\tshowScores(){\n\t\tthis.props.showScores()\n\t\t//move to next question index.\n\t\t//reset timings\n\t\t//reset responses\n\t}\n\n\n\n\n\n\n\n\trender(){\n\t\tconst { currentQuestion } = this.props\n\n\t\treturn(\n\t\t\t<div className=\"quizHostContainer\">\n\t\t\t<SocketListener isHost socket={this.props.socket} />\n\t\t\t\t{this.props.quizState === 'break' &&\n\t\t\t\t\t<p>Break</p>\n\t\t\t\t}\n\t\t\t\t{this.props.quizState === 'question' &&\n\t\t\t\t\t<div className=\"sceneContainer\">\n\t\t\t\t\t<Question question={currentQuestion}/>\n\t\t\t\t\t<div className=\"responsesContainerHost\">\n\t\t\t\t\t\t{this.props.responses && this.props.responses.map((response, i) => {\n\t\t\t\t\t\t\treturn(\n\t\t\t\t\t\t\t\t<PlayerResponse {...response}/>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t})}\n\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t}\n\t\t\t\t{this.props.quizState === 'answer' &&\n\t\t\t\t\t<p>Answer</p>\n\t\t\t\t}\n\t\t\t\t{this.props.quizState === 'end' &&\n\t\t\t\t\t<p>End</p>\n\t\t\t\t}\n\t\t\t</div>\n\t\t)\n\t}\n}\n\n\nconst mapStateToProps = state => ({\n\troom: state.generalHost.room,\n\tstartTime: state.quizHost.startTime,\n\tplayers: state.generalHost.players,\n\trouter: state.router,\n\tresponses: state.quizHost.responses,\n\tquizPlayers: state.quizHost.players,\n\tcurrentQuestion: state.quizHost.currentQuestion,\n\tquizState: state.quizHost.quizState,\n\n})\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n  push: (path) => push(path),\n  setupGame,\n  showAnswer,\n  showQuestionHost,\n  showScores,\n}, dispatch)\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(QuizHost)"]},"metadata":{},"sourceType":"module"}