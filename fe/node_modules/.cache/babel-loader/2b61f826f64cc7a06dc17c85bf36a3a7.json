{"ast":null,"code":"function subscribeToPlayerEvents(self, socket, cb) {\n  socket.on('quiz-show-question-player', showQuestion.bind(this, self));\n  socket.on('quiz-send-to-waiting', sendToWaiting.bind(this, self)); //  \tsocket.on('update-players', updatePlayers.bind(this, cb))\n  // socket.on('chosen-game', chosenGame.bind(this, self, socket))\n}\n\nfunction unsubscribeToPlayerEvents(socket) {// socket.removeAllListeners(\"start-game\");\n  // socket.removeAllListeners(\"device-orientation-sending\");\n  // socket.removeAllListeners(\"quit-game-player\");\n  // socket.removeAllListeners(\"restart-game\");\n}\n\nfunction showQuestion(self, socket) {\n  self.props.showQuestionPlayer();\n}\n\nfunction sendToWaiting(self) {\n  self.props.setWaiting();\n}\n\nfunction sendResponse(self, data, socket) {\n  data.time = new Date().getTime();\n  data.id = socket.id;\n  data.room = self.props.room;\n  self.props.setWaiting();\n  socket.emit('quiz-player-response', data); //rather tahn push I should maybe use state to control waiting vs interacting\n  // self.props.push('/m/quiz/waiting')\n} // function chosenGame(self, nothing, data){\n// \tconsole.log(data)\n// \tself.props.push('h/' + data)\n// }\n// function roomCodeGenerated(cb, data){\n// \tcb('setRoomCode', data)\n// }\n// function updatePlayers(cb, data){\n// \tconsole.log('updateing players', data)\n// \tcb('updatePlayers', data)\n// }\n\n\nexport { showQuestion, subscribeToPlayerEvents, unsubscribeToPlayerEvents };","map":{"version":3,"sources":["/Users/bobby.hewitt/Documents/test/ops/fe/src/sockets/Quiz/player.js"],"names":["subscribeToPlayerEvents","self","socket","cb","on","showQuestion","bind","sendToWaiting","unsubscribeToPlayerEvents","props","showQuestionPlayer","setWaiting","sendResponse","data","time","Date","getTime","id","room","emit"],"mappings":"AAAA,SAASA,uBAAT,CAAiCC,IAAjC,EAAuCC,MAAvC,EAA+CC,EAA/C,EAAmD;AAClDD,EAAAA,MAAM,CAACE,EAAP,CAAU,2BAAV,EAAuCC,YAAY,CAACC,IAAb,CAAkB,IAAlB,EAAwBL,IAAxB,CAAvC;AACAC,EAAAA,MAAM,CAACE,EAAP,CAAU,sBAAV,EAAkCG,aAAa,CAACD,IAAd,CAAmB,IAAnB,EAAyBL,IAAzB,CAAlC,EAFkD,CAGlD;AACA;AACA;;AAED,SAASO,yBAAT,CAAmCN,MAAnC,EAA2C,CAC1C;AACA;AACA;AACA;AACA;;AAED,SAASG,YAAT,CAAsBJ,IAAtB,EAA4BC,MAA5B,EAAmC;AAClCD,EAAAA,IAAI,CAACQ,KAAL,CAAWC,kBAAX;AACA;;AAED,SAASH,aAAT,CAAuBN,IAAvB,EAA4B;AAC3BA,EAAAA,IAAI,CAACQ,KAAL,CAAWE,UAAX;AACA;;AAED,SAASC,YAAT,CAAsBX,IAAtB,EAA4BY,IAA5B,EAAkCX,MAAlC,EAAyC;AACxCW,EAAAA,IAAI,CAACC,IAAL,GAAa,IAAIC,IAAJ,EAAD,CAAaC,OAAb,EAAZ;AACAH,EAAAA,IAAI,CAACI,EAAL,GAAUf,MAAM,CAACe,EAAjB;AACAJ,EAAAA,IAAI,CAACK,IAAL,GAAYjB,IAAI,CAACQ,KAAL,CAAWS,IAAvB;AACAjB,EAAAA,IAAI,CAACQ,KAAL,CAAWE,UAAX;AACAT,EAAAA,MAAM,CAACiB,IAAP,CAAY,sBAAZ,EAAoCN,IAApC,EALwC,CAMxC;AACA;AACA,C,CAGD;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;;AAEA,SACCR,YADD,EAECL,uBAFD,EAGCQ,yBAHD","sourcesContent":["function subscribeToPlayerEvents(self, socket, cb) {\n\tsocket.on('quiz-show-question-player', showQuestion.bind(this, self))\n\tsocket.on('quiz-send-to-waiting', sendToWaiting.bind(this, self))\n //  \tsocket.on('update-players', updatePlayers.bind(this, cb))\n\t// socket.on('chosen-game', chosenGame.bind(this, self, socket))\n}\n\nfunction unsubscribeToPlayerEvents(socket) {\n\t// socket.removeAllListeners(\"start-game\");\n\t// socket.removeAllListeners(\"device-orientation-sending\");\n\t// socket.removeAllListeners(\"quit-game-player\");\n\t// socket.removeAllListeners(\"restart-game\");\n}\n\nfunction showQuestion(self, socket){\n\tself.props.showQuestionPlayer()\n}\n\nfunction sendToWaiting(self){\n\tself.props.setWaiting()\n}\n\nfunction sendResponse(self, data, socket){\n\tdata.time = (new Date()).getTime()\n\tdata.id = socket.id\n\tdata.room = self.props.room\n\tself.props.setWaiting()\n\tsocket.emit('quiz-player-response', data)\n\t//rather tahn push I should maybe use state to control waiting vs interacting\n\t// self.props.push('/m/quiz/waiting')\n}\n\n\n// function chosenGame(self, nothing, data){\n// \tconsole.log(data)\n// \tself.props.push('h/' + data)\n// }\n\n// function roomCodeGenerated(cb, data){\n// \tcb('setRoomCode', data)\n// }\n\n// function updatePlayers(cb, data){\n// \tconsole.log('updateing players', data)\n// \tcb('updatePlayers', data)\n// }\n\nexport {\n\tshowQuestion,\n\tsubscribeToPlayerEvents,\n\tunsubscribeToPlayerEvents,\n};"]},"metadata":{},"sourceType":"module"}