{"ast":null,"code":"import _classCallCheck from \"/Users/bobby.hewitt/Documents/test/ops/fe/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/bobby.hewitt/Documents/test/ops/fe/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/bobby.hewitt/Documents/test/ops/fe/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/bobby.hewitt/Documents/test/ops/fe/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/bobby.hewitt/Documents/test/ops/fe/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/bobby.hewitt/Documents/test/ops/fe/src/containers/SocketListener/Quiz.js\";\nimport React, { Component } from 'react';\nimport { push as _push } from 'react-router-redux';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux'; //pingP events\n\nimport { subscribeToPlayerEvents, unsubscribeToPlayerEvents } from 'sockets/Quiz/player';\nimport { subscribeToHostEvents, unsubscribeToHostEvents } from 'sockets/Quiz/host';\nimport { setResponse } from 'actions/quiz';\n\nvar SocketListener =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SocketListener, _Component);\n\n  function SocketListener() {\n    _classCallCheck(this, SocketListener);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(SocketListener).apply(this, arguments));\n  }\n\n  _createClass(SocketListener, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this = this;\n\n      // console.log('socket listener mounting')\n      if (this.props.isHost) {\n        subscribeToHostEvents(this, this.props.socket, function (action, data) {\n          _this.props[action](data);\n        });\n      } else {\n        subscribeToPlayerEvents(this, this.props.socket, function (action, data) {\n          _this.props[action](data);\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.props.isHost) {\n        unsubscribeToHostEvents(this.props.socket);\n      } else {\n        unsubscribeToPlayerEvents(this.props.socket);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return SocketListener;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {// count: state.counter.count\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    //general functions\n    setResponse: setResponse,\n    push: function push(path) {\n      return _push('/' + path);\n    }\n  }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SocketListener);","map":{"version":3,"sources":["/Users/bobby.hewitt/Documents/test/ops/fe/src/containers/SocketListener/Quiz.js"],"names":["React","Component","push","bindActionCreators","connect","subscribeToPlayerEvents","unsubscribeToPlayerEvents","subscribeToHostEvents","unsubscribeToHostEvents","setResponse","SocketListener","props","isHost","socket","action","data","mapStateToProps","state","mapDispatchToProps","dispatch","path"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,IAAI,IAAJA,KAAT,QAAqB,oBAArB;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CACA;;AACA,SAAQC,uBAAR,EAAiCC,yBAAjC,QAAiE,qBAAjE;AACA,SAAQC,qBAAR,EAA+BC,uBAA/B,QAA6D,mBAA7D;AAEA,SAASC,WAAT,QAA4B,cAA5B;;IAEMC,c;;;;;;;;;;;;;wCAEe;AAAA;;AACjB;AACA,UAAI,KAAKC,KAAL,CAAWC,MAAf,EAAsB;AACpBL,QAAAA,qBAAqB,CAAC,IAAD,EAAO,KAAKI,KAAL,CAAWE,MAAlB,EAA0B,UAACC,MAAD,EAASC,IAAT,EAAkB;AAC/D,UAAA,KAAI,CAACJ,KAAL,CAAWG,MAAX,EAAmBC,IAAnB;AACD,SAFoB,CAArB;AAGD,OAJD,MAIO;AACNV,QAAAA,uBAAuB,CAAC,IAAD,EAAO,KAAKM,KAAL,CAAWE,MAAlB,EAA0B,UAACC,MAAD,EAASC,IAAT,EAAkB;AAChE,UAAA,KAAI,CAACJ,KAAL,CAAWG,MAAX,EAAmBC,IAAnB;AACF,SAFsB,CAAvB;AAGD;AACD;;;2CAEqB;AACnB,UAAI,KAAKJ,KAAL,CAAWC,MAAf,EAAsB;AACrBJ,QAAAA,uBAAuB,CAAC,KAAKG,KAAL,CAAWE,MAAZ,CAAvB;AACD,OAFA,MAEM;AACNP,QAAAA,yBAAyB,CAAC,KAAKK,KAAL,CAAWE,MAAZ,CAAzB;AACD;AACD;;;6BAEO;AACN,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAID;;;;EA5B0BZ,S;;AA+B7B,IAAMe,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK;AAAA,SAAK,CAChC;AADgC,GAAL;AAAA,CAA7B;;AAIA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,QAAQ;AAAA,SAAIhB,kBAAkB,CAAC;AACxD;AACAM,IAAAA,WAAW,EAAXA,WAFwD;AAGxDP,IAAAA,IAAI,EAAE,cAACkB,IAAD;AAAA,aAAUlB,KAAI,CAAC,MAAMkB,IAAP,CAAd;AAAA;AAHkD,GAAD,EAItDD,QAJsD,CAAtB;AAAA,CAAnC;;AAMA,eAAef,OAAO,CACpBY,eADoB,EAEpBE,kBAFoB,CAAP,CAGbR,cAHa,CAAf","sourcesContent":["import React, { Component } from 'react'\nimport { push } from 'react-router-redux'\nimport { bindActionCreators } from 'redux'\nimport { connect } from 'react-redux'\n//pingP events\nimport {subscribeToPlayerEvents, unsubscribeToPlayerEvents} from 'sockets/Quiz/player'\nimport {subscribeToHostEvents, unsubscribeToHostEvents} from 'sockets/Quiz/host'\n\nimport { setResponse } from 'actions/quiz'\n\nclass SocketListener extends Component {\n  \n  componentDidMount(){\n    // console.log('socket listener mounting')\n    if (this.props.isHost){\n      subscribeToHostEvents(this, this.props.socket, (action, data) => {\n        this.props[action](data)\n      })\n    } else {\n     subscribeToPlayerEvents(this, this.props.socket, (action, data) => {\n        this.props[action](data)\n     })\n   }\n  }\n\n  componentWillUnmount(){\n     if (this.props.isHost){\n      unsubscribeToHostEvents(this.props.socket)\n    } else {\n     unsubscribeToPlayerEvents(this.props.socket)\n   }\n  }\n\n  render(){\n    return(\n      <div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  // count: state.counter.count\n})\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n  //general functions\n  setResponse,\n  push: (path) => push('/' + path)\n}, dispatch)\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SocketListener)"]},"metadata":{},"sourceType":"module"}