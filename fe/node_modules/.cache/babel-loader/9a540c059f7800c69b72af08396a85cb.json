{"ast":null,"code":"import _classCallCheck from \"/Users/bobby.hewitt/Documents/test/ops/fe/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/bobby.hewitt/Documents/test/ops/fe/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/bobby.hewitt/Documents/test/ops/fe/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/bobby.hewitt/Documents/test/ops/fe/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/bobby.hewitt/Documents/test/ops/fe/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/bobby.hewitt/Documents/test/ops/fe/src/containers/SocketListener/index.js\";\nimport React, { Component } from 'react';\nimport { push as _push } from 'react-router-redux';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport io from 'socket.io-client'; //pingP events\n\nimport { subscribeToPlayerEvents } from 'sockets/player';\nimport { subscribeToHostEvents } from 'sockets/host'; //pingP actions\n\nimport { setRoomCode, startRoundHost, setResponses, setCoords1, setCoords2 } from 'actions/PingP/host';\nimport { setPlayerRoom, setPlayerNumber, powerUpGained, powerUpUsed } from 'actions/PingP/player';\nimport { setSelf } from 'actions/global/player';\nimport { startGame, setGameOver, powerUpUsedGameplay } from 'actions/PingP/gameplay';\nimport { updatePlayer } from 'actions/general/host';\n\nvar SocketListener =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SocketListener, _Component);\n\n  function SocketListener(props) {\n    _classCallCheck(this, SocketListener);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(SocketListener).call(this, props));\n  }\n\n  _createClass(SocketListener, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this = this;\n\n      // console.log('socket listener mounting')\n      if (this.props.isHost) {\n        subscribeToHostEvents(this, function (action, data) {\n          _this.props[action](data);\n        });\n      } else {\n        subscribeToPlayerEvents(this, function (action, data) {\n          _this.props[action](data);\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return SocketListener;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {// count: state.counter.count\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    //general functions\n    setSelf: setSelf,\n    updatePlayers: updatePlayers,\n    //game specific functions\n    setRoomCode: setRoomCode,\n    powerUpUsedGameplay: powerUpUsedGameplay,\n    powerUpGained: powerUpGained,\n    powerUpUsed: powerUpUsed,\n    startGame: startGame,\n    setGameOver: setGameOver,\n    setPlayerNumber: setPlayerNumber,\n    setResponses: setResponses,\n    setCoords1: setCoords1,\n    setCoords2: setCoords2,\n    startRoundHost: startRoundHost,\n    setPlayerRoom: setPlayerRoom,\n    push: function push(path) {\n      return _push('/' + path);\n    }\n  }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SocketListener);","map":{"version":3,"sources":["/Users/bobby.hewitt/Documents/test/ops/fe/src/containers/SocketListener/index.js"],"names":["React","Component","push","bindActionCreators","connect","io","subscribeToPlayerEvents","subscribeToHostEvents","setRoomCode","startRoundHost","setResponses","setCoords1","setCoords2","setPlayerRoom","setPlayerNumber","powerUpGained","powerUpUsed","setSelf","startGame","setGameOver","powerUpUsedGameplay","updatePlayer","SocketListener","props","isHost","action","data","mapStateToProps","state","mapDispatchToProps","dispatch","updatePlayers","path"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,IAAI,IAAJA,KAAT,QAAqB,oBAArB;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,EAAP,MAAe,kBAAf,C,CAGA;;AACA,SAAQC,uBAAR,QAAsC,gBAAtC;AACA,SAAQC,qBAAR,QAAoC,cAApC,C,CAEA;;AACA,SAASC,WAAT,EAAsBC,cAAtB,EAAsCC,YAAtC,EAAoDC,UAApD,EAAgEC,UAAhE,QAAkF,oBAAlF;AACA,SAASC,aAAT,EAAwBC,eAAxB,EAAyCC,aAAzC,EAAwDC,WAAxD,QAA2E,sBAA3E;AACA,SAASC,OAAT,QAAwB,uBAAxB;AACA,SAASC,SAAT,EAAoBC,WAApB,EAAiCC,mBAAjC,QAA4D,wBAA5D;AACA,SAASC,YAAT,QAA6B,sBAA7B;;IAEMC,c;;;;;AACJ,0BAAYC,KAAZ,EAAkB;AAAA;;AAAA,uFACVA,KADU;AAEjB;;;;wCAEkB;AAAA;;AACjB;AACA,UAAI,KAAKA,KAAL,CAAWC,MAAf,EAAsB;AACpBjB,QAAAA,qBAAqB,CAAC,IAAD,EAAO,UAACkB,MAAD,EAASC,IAAT,EAAkB;AAC5C,UAAA,KAAI,CAACH,KAAL,CAAWE,MAAX,EAAmBC,IAAnB;AACD,SAFoB,CAArB;AAGD,OAJD,MAIO;AACNpB,QAAAA,uBAAuB,CAAC,IAAD,EAAO,UAACmB,MAAD,EAASC,IAAT,EAAkB;AAC7C,UAAA,KAAI,CAACH,KAAL,CAAWE,MAAX,EAAmBC,IAAnB;AACF,SAFsB,CAAvB;AAGD;AACD;;;6BAEO;AACN,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAID;;;;EAvB0BzB,S;;AA0B7B,IAAM0B,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK;AAAA,SAAK,CAChC;AADgC,GAAL;AAAA,CAA7B;;AAIA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,QAAQ;AAAA,SAAI3B,kBAAkB,CAAC;AACxD;AACAc,IAAAA,OAAO,EAAPA,OAFwD;AAGxDc,IAAAA,aAAa,EAAbA,aAHwD;AAIxD;AACAvB,IAAAA,WAAW,EAAXA,WALwD;AAMxDY,IAAAA,mBAAmB,EAAnBA,mBANwD;AAOxDL,IAAAA,aAAa,EAAbA,aAPwD;AAQxDC,IAAAA,WAAW,EAAXA,WARwD;AASxDE,IAAAA,SAAS,EAATA,SATwD;AAUxDC,IAAAA,WAAW,EAAXA,WAVwD;AAWxDL,IAAAA,eAAe,EAAfA,eAXwD;AAYxDJ,IAAAA,YAAY,EAAZA,YAZwD;AAaxDC,IAAAA,UAAU,EAAVA,UAbwD;AAcxDC,IAAAA,UAAU,EAAVA,UAdwD;AAexDH,IAAAA,cAAc,EAAdA,cAfwD;AAgBxDI,IAAAA,aAAa,EAAbA,aAhBwD;AAiBxDX,IAAAA,IAAI,EAAE,cAAC8B,IAAD;AAAA,aAAU9B,KAAI,CAAC,MAAM8B,IAAP,CAAd;AAAA;AAjBkD,GAAD,EAkBtDF,QAlBsD,CAAtB;AAAA,CAAnC;;AAoBA,eAAe1B,OAAO,CACpBuB,eADoB,EAEpBE,kBAFoB,CAAP,CAGbP,cAHa,CAAf","sourcesContent":["import React, { Component } from 'react'\nimport { push } from 'react-router-redux'\nimport { bindActionCreators } from 'redux'\nimport { connect } from 'react-redux'\nimport io from 'socket.io-client';\n\n\n//pingP events\nimport {subscribeToPlayerEvents} from 'sockets/player'\nimport {subscribeToHostEvents} from 'sockets/host'\n\n//pingP actions\nimport { setRoomCode, startRoundHost, setResponses, setCoords1, setCoords2 } from 'actions/PingP/host'\nimport { setPlayerRoom, setPlayerNumber, powerUpGained, powerUpUsed } from 'actions/PingP/player'\nimport { setSelf } from 'actions/global/player'\nimport { startGame, setGameOver, powerUpUsedGameplay } from 'actions/PingP/gameplay'\nimport { updatePlayer } from 'actions/general/host'\n\nclass SocketListener extends Component {\n  constructor(props){\n    super(props)\n  }\n\n  componentDidMount(){\n    // console.log('socket listener mounting')\n    if (this.props.isHost){\n      subscribeToHostEvents(this, (action, data) => {\n        this.props[action](data)\n      })\n    } else {\n     subscribeToPlayerEvents(this, (action, data) => {\n        this.props[action](data)\n     })\n   }\n  }\n\n  render(){\n    return(\n      <div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  // count: state.counter.count\n})\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n  //general functions\n  setSelf,\n  updatePlayers,\n  //game specific functions\n  setRoomCode,\n  powerUpUsedGameplay,\n  powerUpGained,\n  powerUpUsed,\n  startGame,\n  setGameOver,\n  setPlayerNumber,\n  setResponses,\n  setCoords1,\n  setCoords2,\n  startRoundHost,\n  setPlayerRoom,\n  push: (path) => push('/' + path)\n}, dispatch)\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SocketListener)"]},"metadata":{},"sourceType":"module"}